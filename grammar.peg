start
  = yarr*

yarr
  = __ docComment:docComment __ {
    return docComment
  }

docComment
  = comment:comment lineTerminator styles:styles* __ orphanStyles* {
    comment.styles = styles
    return comment
  }

styles
 = selector:[a-zA-Z0-9.: ]* __ "{" __ ruleset:ruleset {
    return {
      selector: selector.join(""),
      ruleset: ruleset
    }
  }

orphanStyles
  = __ styles __

ruleset
  = rules:(whiteSpace / lineTerminator / lineComment / "(" / ")" / "," / "-" / "%" / "#" / ";" / " " / GENERIC_VALUES)* "}" whiteSpace* lineTerminator {
    return rules.join("")
  }



comment
  = START space* description:description+ space* shortDescription:description* space* tags:tag* END {
    return {
      description: description.join(" "),
      shortDescription: shortDescription.join(" "),
      tags:tags
    }
  }

description
  = __ "*" !"/" __ desc:(" " / GENERIC_VALUES)+ __ [\n\f]* {
    return desc.join("")
  }

space
  = space:(!(START / END / description / tag) __ "*" __ )  {
    return space.join("")
  }

tag = (tagMarkup / tagGeneric)

tagMarkup
  = __ "*" __ id:("@markup") __ value:(" " / GENERIC_VALUES)+ __ [\n\f]* {
    return {
      id: "markup",
      value: value.join("")
    }
  }

tagGeneric
  = __ "*" !"/"  __ id:("@"[a-z]+) __ value:GENERIC_VALUES+ __ description:[ a-zA-Z0-9.]* [\n\f]* {
    var obj = {
      id: id[1].join(""),
      value: value.join("")
    }
    if (description != "") {
      obj.description = description.join("")
    }
    return obj
  }





START = __ '/**' {
    return "START"
  }

END = __ '*/' {
    return "END"
  }

GENERIC_VALUES = "=" / '.' / '\\' / '"' / '/' / [<>a-zA-Z0-9:]


/* white space and comments */ 
__ 
  = ( whiteSpace / lineTerminator / lineComment )* 
whiteSpace 
  = [\t\v\f \u00A0\uFEFF] 
lineTerminator 
  = [\n\r] 
enclosedComment 
  = "/*" test:(!"*/" anyCharacter)* "*/" {
  return "test " + test;
}
lineComment 
  = "//" (!lineTerminator anyCharacter)* 
anyCharacter 
  = .