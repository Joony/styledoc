var styledoc_parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "END": parse_END,
        "GENERIC_VALUES": parse_GENERIC_VALUES,
        "START": parse_START,
        "__": parse___,
        "anyCharacter": parse_anyCharacter,
        "comment": parse_comment,
        "description": parse_description,
        "docComment": parse_docComment,
        "enclosedComment": parse_enclosedComment,
        "lineComment": parse_lineComment,
        "lineTerminator": parse_lineTerminator,
        "orphanStyles": parse_orphanStyles,
        "ruleset": parse_ruleset,
        "space": parse_space,
        "start": parse_start,
        "styles": parse_styles,
        "tag": parse_tag,
        "tagGeneric": parse_tagGeneric,
        "tagMarkup": parse_tagMarkup,
        "whiteSpace": parse_whiteSpace,
        "yarr": parse_yarr
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_yarr();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_yarr();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_yarr() {
        var cacheKey = 'yarr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          var result4 = parse_docComment();
          if (result4 !== null) {
            var result5 = parse___();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(docComment) {
              return docComment
            })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_docComment() {
        var cacheKey = 'docComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_comment();
        if (result3 !== null) {
          var result4 = parse_lineTerminator();
          if (result4 !== null) {
            var result5 = [];
            var result9 = parse_styles();
            while (result9 !== null) {
              result5.push(result9);
              var result9 = parse_styles();
            }
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                var result7 = [];
                var result8 = parse_orphanStyles();
                while (result8 !== null) {
                  result7.push(result8);
                  var result8 = parse_orphanStyles();
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(comment, styles) {
              comment.styles = styles
              return comment
            })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_styles() {
        var cacheKey = 'styles@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        if (input.substr(pos).match(/^[a-zA-Z0-9.: ]/) !== null) {
          var result8 = input.charAt(pos);
          pos++;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z0-9.: ]");
          }
        }
        while (result8 !== null) {
          result3.push(result8);
          if (input.substr(pos).match(/^[a-zA-Z0-9.: ]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z0-9.: ]");
            }
          }
        }
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "{") {
              var result5 = "{";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"{\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                var result7 = parse_ruleset();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(selector, ruleset) {
              return {
                selector: selector.join(""),
                ruleset: ruleset
              }
            })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_orphanStyles() {
        var cacheKey = 'orphanStyles@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse___();
        if (result1 !== null) {
          var result2 = parse_styles();
          if (result2 !== null) {
            var result3 = parse___();
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ruleset() {
        var cacheKey = 'ruleset@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result20 = parse_whiteSpace();
        if (result20 !== null) {
          var result8 = result20;
        } else {
          var result19 = parse_lineTerminator();
          if (result19 !== null) {
            var result8 = result19;
          } else {
            var result18 = parse_lineComment();
            if (result18 !== null) {
              var result8 = result18;
            } else {
              if (input.substr(pos, 1) === "(") {
                var result17 = "(";
                pos += 1;
              } else {
                var result17 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result17 !== null) {
                var result8 = result17;
              } else {
                if (input.substr(pos, 1) === ")") {
                  var result16 = ")";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result16 !== null) {
                  var result8 = result16;
                } else {
                  if (input.substr(pos, 1) === ",") {
                    var result15 = ",";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result15 !== null) {
                    var result8 = result15;
                  } else {
                    if (input.substr(pos, 1) === "-") {
                      var result14 = "-";
                      pos += 1;
                    } else {
                      var result14 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"-\"");
                      }
                    }
                    if (result14 !== null) {
                      var result8 = result14;
                    } else {
                      if (input.substr(pos, 1) === "%") {
                        var result13 = "%";
                        pos += 1;
                      } else {
                        var result13 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"%\"");
                        }
                      }
                      if (result13 !== null) {
                        var result8 = result13;
                      } else {
                        if (input.substr(pos, 1) === "#") {
                          var result12 = "#";
                          pos += 1;
                        } else {
                          var result12 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"#\"");
                          }
                        }
                        if (result12 !== null) {
                          var result8 = result12;
                        } else {
                          if (input.substr(pos, 1) === ";") {
                            var result11 = ";";
                            pos += 1;
                          } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                              matchFailed("\";\"");
                            }
                          }
                          if (result11 !== null) {
                            var result8 = result11;
                          } else {
                            if (input.substr(pos, 1) === " ") {
                              var result10 = " ";
                              pos += 1;
                            } else {
                              var result10 = null;
                              if (reportMatchFailures) {
                                matchFailed("\" \"");
                              }
                            }
                            if (result10 !== null) {
                              var result8 = result10;
                            } else {
                              var result9 = parse_GENERIC_VALUES();
                              if (result9 !== null) {
                                var result8 = result9;
                              } else {
                                var result8 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        while (result8 !== null) {
          result3.push(result8);
          var result20 = parse_whiteSpace();
          if (result20 !== null) {
            var result8 = result20;
          } else {
            var result19 = parse_lineTerminator();
            if (result19 !== null) {
              var result8 = result19;
            } else {
              var result18 = parse_lineComment();
              if (result18 !== null) {
                var result8 = result18;
              } else {
                if (input.substr(pos, 1) === "(") {
                  var result17 = "(";
                  pos += 1;
                } else {
                  var result17 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result17 !== null) {
                  var result8 = result17;
                } else {
                  if (input.substr(pos, 1) === ")") {
                    var result16 = ")";
                    pos += 1;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result16 !== null) {
                    var result8 = result16;
                  } else {
                    if (input.substr(pos, 1) === ",") {
                      var result15 = ",";
                      pos += 1;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result15 !== null) {
                      var result8 = result15;
                    } else {
                      if (input.substr(pos, 1) === "-") {
                        var result14 = "-";
                        pos += 1;
                      } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"-\"");
                        }
                      }
                      if (result14 !== null) {
                        var result8 = result14;
                      } else {
                        if (input.substr(pos, 1) === "%") {
                          var result13 = "%";
                          pos += 1;
                        } else {
                          var result13 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"%\"");
                          }
                        }
                        if (result13 !== null) {
                          var result8 = result13;
                        } else {
                          if (input.substr(pos, 1) === "#") {
                            var result12 = "#";
                            pos += 1;
                          } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"#\"");
                            }
                          }
                          if (result12 !== null) {
                            var result8 = result12;
                          } else {
                            if (input.substr(pos, 1) === ";") {
                              var result11 = ";";
                              pos += 1;
                            } else {
                              var result11 = null;
                              if (reportMatchFailures) {
                                matchFailed("\";\"");
                              }
                            }
                            if (result11 !== null) {
                              var result8 = result11;
                            } else {
                              if (input.substr(pos, 1) === " ") {
                                var result10 = " ";
                                pos += 1;
                              } else {
                                var result10 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\" \"");
                                }
                              }
                              if (result10 !== null) {
                                var result8 = result10;
                              } else {
                                var result9 = parse_GENERIC_VALUES();
                                if (result9 !== null) {
                                  var result8 = result9;
                                } else {
                                  var result8 = null;;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          }
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "}") {
            var result4 = "}";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"}\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result7 = parse_whiteSpace();
            while (result7 !== null) {
              result5.push(result7);
              var result7 = parse_whiteSpace();
            }
            if (result5 !== null) {
              var result6 = parse_lineTerminator();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(rules) {
              return rules.join("")
            })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_START();
        if (result3 !== null) {
          var result4 = [];
          var result16 = parse_space();
          while (result16 !== null) {
            result4.push(result16);
            var result16 = parse_space();
          }
          if (result4 !== null) {
            var result15 = parse_description();
            if (result15 !== null) {
              var result5 = [];
              while (result15 !== null) {
                result5.push(result15);
                var result15 = parse_description();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = [];
              var result14 = parse_space();
              while (result14 !== null) {
                result6.push(result14);
                var result14 = parse_space();
              }
              if (result6 !== null) {
                var result7 = [];
                var result13 = parse_description();
                while (result13 !== null) {
                  result7.push(result13);
                  var result13 = parse_description();
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result12 = parse_space();
                  while (result12 !== null) {
                    result8.push(result12);
                    var result12 = parse_space();
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result11 = parse_tag();
                    while (result11 !== null) {
                      result9.push(result11);
                      var result11 = parse_tag();
                    }
                    if (result9 !== null) {
                      var result10 = parse_END();
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(description, shortDescription, tags) {
              return {
                description: description.join(" "),
                shortDescription: shortDescription.join(" "),
                tags:tags
              }
            })(result1[2], result1[4], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_description() {
        var cacheKey = 'description@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          if (input.substr(pos, 1) === "*") {
            var result4 = "*";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === "/") {
              var result14 = "/";
              pos += 1;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result14 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                if (input.substr(pos, 1) === " ") {
                  var result13 = " ";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\" \"");
                  }
                }
                if (result13 !== null) {
                  var result11 = result13;
                } else {
                  var result12 = parse_GENERIC_VALUES();
                  if (result12 !== null) {
                    var result11 = result12;
                  } else {
                    var result11 = null;;
                  };
                }
                if (result11 !== null) {
                  var result7 = [];
                  while (result11 !== null) {
                    result7.push(result11);
                    if (input.substr(pos, 1) === " ") {
                      var result13 = " ";
                      pos += 1;
                    } else {
                      var result13 = null;
                      if (reportMatchFailures) {
                        matchFailed("\" \"");
                      }
                    }
                    if (result13 !== null) {
                      var result11 = result13;
                    } else {
                      var result12 = parse_GENERIC_VALUES();
                      if (result12 !== null) {
                        var result11 = result12;
                      } else {
                        var result11 = null;;
                      };
                    }
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  var result8 = parse___();
                  if (result8 !== null) {
                    var result9 = [];
                    if (input.substr(pos).match(/^[\n]/) !== null) {
                      var result10 = input.charAt(pos);
                      pos++;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\n]");
                      }
                    }
                    while (result10 !== null) {
                      result9.push(result10);
                      if (input.substr(pos).match(/^[\n]/) !== null) {
                        var result10 = input.charAt(pos);
                        pos++;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\n]");
                        }
                      }
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(desc) {
              return desc.join("")
            })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result11 = parse_START();
        if (result11 !== null) {
          var result7 = result11;
        } else {
          var result10 = parse_END();
          if (result10 !== null) {
            var result7 = result10;
          } else {
            var result9 = parse_description();
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result8 = parse_tag();
              if (result8 !== null) {
                var result7 = result8;
              } else {
                var result7 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result7 === null) {
          var result3 = '';
        } else {
          var result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "*") {
              var result5 = "*";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(space) {
              return space.join("")
            })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tag() {
        var cacheKey = 'tag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_tagMarkup();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_tagGeneric();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tagMarkup() {
        var cacheKey = 'tagMarkup@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          if (input.substr(pos, 1) === "*") {
            var result4 = "*";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse___();
            if (result5 !== null) {
              if (input.substr(pos, 7) === "@markup") {
                var result6 = "@markup";
                pos += 7;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"@markup\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse___();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === " ") {
                    var result14 = " ";
                    pos += 1;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\" \"");
                    }
                  }
                  if (result14 !== null) {
                    var result12 = result14;
                  } else {
                    var result13 = parse_GENERIC_VALUES();
                    if (result13 !== null) {
                      var result12 = result13;
                    } else {
                      var result12 = null;;
                    };
                  }
                  if (result12 !== null) {
                    var result8 = [];
                    while (result12 !== null) {
                      result8.push(result12);
                      if (input.substr(pos, 1) === " ") {
                        var result14 = " ";
                        pos += 1;
                      } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                          matchFailed("\" \"");
                        }
                      }
                      if (result14 !== null) {
                        var result12 = result14;
                      } else {
                        var result13 = parse_GENERIC_VALUES();
                        if (result13 !== null) {
                          var result12 = result13;
                        } else {
                          var result12 = null;;
                        };
                      }
                    }
                  } else {
                    var result8 = null;
                  }
                  if (result8 !== null) {
                    var result9 = parse___();
                    if (result9 !== null) {
                      var result10 = [];
                      if (input.substr(pos).match(/^[\n]/) !== null) {
                        var result11 = input.charAt(pos);
                        pos++;
                      } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\n]");
                        }
                      }
                      while (result11 !== null) {
                        result10.push(result11);
                        if (input.substr(pos).match(/^[\n]/) !== null) {
                          var result11 = input.charAt(pos);
                          pos++;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\n]");
                          }
                        }
                      }
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(id, value) {
              return {
                id: "markup",
                value: value.join("")
              }
            })(result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_tagGeneric() {
        var cacheKey = 'tagGeneric@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          if (input.substr(pos, 1) === "*") {
            var result4 = "*";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          if (result4 !== null) {
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === "/") {
              var result19 = "/";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result19 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos3;
            }
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                var savedPos2 = pos;
                if (input.substr(pos, 1) === "@") {
                  var result16 = "@";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"@\"");
                  }
                }
                if (result16 !== null) {
                  if (input.substr(pos).match(/^[a-z]/) !== null) {
                    var result18 = input.charAt(pos);
                    pos++;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("[a-z]");
                    }
                  }
                  if (result18 !== null) {
                    var result17 = [];
                    while (result18 !== null) {
                      result17.push(result18);
                      if (input.substr(pos).match(/^[a-z]/) !== null) {
                        var result18 = input.charAt(pos);
                        pos++;
                      } else {
                        var result18 = null;
                        if (reportMatchFailures) {
                          matchFailed("[a-z]");
                        }
                      }
                    }
                  } else {
                    var result17 = null;
                  }
                  if (result17 !== null) {
                    var result7 = [result16, result17];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result8 = parse___();
                  if (result8 !== null) {
                    var result15 = parse_GENERIC_VALUES();
                    if (result15 !== null) {
                      var result9 = [];
                      while (result15 !== null) {
                        result9.push(result15);
                        var result15 = parse_GENERIC_VALUES();
                      }
                    } else {
                      var result9 = null;
                    }
                    if (result9 !== null) {
                      var result10 = parse___();
                      if (result10 !== null) {
                        var result11 = [];
                        if (input.substr(pos).match(/^[ a-zA-Z0-9.]/) !== null) {
                          var result14 = input.charAt(pos);
                          pos++;
                        } else {
                          var result14 = null;
                          if (reportMatchFailures) {
                            matchFailed("[ a-zA-Z0-9.]");
                          }
                        }
                        while (result14 !== null) {
                          result11.push(result14);
                          if (input.substr(pos).match(/^[ a-zA-Z0-9.]/) !== null) {
                            var result14 = input.charAt(pos);
                            pos++;
                          } else {
                            var result14 = null;
                            if (reportMatchFailures) {
                              matchFailed("[ a-zA-Z0-9.]");
                            }
                          }
                        }
                        if (result11 !== null) {
                          var result12 = [];
                          if (input.substr(pos).match(/^[\n]/) !== null) {
                            var result13 = input.charAt(pos);
                            pos++;
                          } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                              matchFailed("[\\n]");
                            }
                          }
                          while (result13 !== null) {
                            result12.push(result13);
                            if (input.substr(pos).match(/^[\n]/) !== null) {
                              var result13 = input.charAt(pos);
                              pos++;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("[\\n]");
                              }
                            }
                          }
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(id, value, description) {
              var obj = {
                id: id[1].join(""),
                value: value.join("")
              }
              if (description != "") {
                obj.description = description.join("")
              }
              return obj
            })(result1[4], result1[6], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_START() {
        var cacheKey = 'START@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          if (input.substr(pos, 3) === "/**") {
            var result4 = "/**";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"/**\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
              return "START"
            })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_END() {
        var cacheKey = 'END@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          if (input.substr(pos, 2) === "*/") {
            var result4 = "*/";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
              return "END"
            })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GENERIC_VALUES() {
        var cacheKey = 'GENERIC_VALUES@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "=") {
          var result6 = "=";
          pos += 1;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"=\"");
          }
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 1) === ".") {
            var result5 = ".";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos, 1) === "\\") {
              var result4 = "\\";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos, 1) === "\"") {
                var result3 = "\"";
                pos += 1;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos, 1) === "/") {
                  var result2 = "/";
                  pos += 1;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"/\"");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos).match(/^[<>a-zA-Z0-9:]/) !== null) {
                    var result1 = input.charAt(pos);
                    pos++;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("[<>a-zA-Z0-9:]");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = '__@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result4 = parse_whiteSpace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_lineTerminator();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_lineComment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result4 = parse_whiteSpace();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_lineTerminator();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_lineComment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whiteSpace() {
        var cacheKey = 'whiteSpace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[	 \xA0\uFEFF]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[	 \\xA0\\uFEFF]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lineTerminator() {
        var cacheKey = 'lineTerminator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[\n\r]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\\n\\r]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_enclosedComment() {
        var cacheKey = 'enclosedComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "/*") {
          var result3 = "/*";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"/*\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "*/") {
            var result9 = "*/";
            pos += 2;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          if (result7 !== null) {
            var result8 = parse_anyCharacter();
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          while (result6 !== null) {
            result4.push(result6);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result9 = "*/";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result9 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            if (result7 !== null) {
              var result8 = parse_anyCharacter();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 2) === "*/") {
              var result5 = "*/";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(test) {
            return "test " + test;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lineComment() {
        var cacheKey = 'lineComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "//") {
          var result1 = "//";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result6 = parse_lineTerminator();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result5 = parse_anyCharacter();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result6 = parse_lineTerminator();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              var result5 = parse_anyCharacter();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anyCharacter() {
        var cacheKey = 'anyCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.length > pos) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();